{"version":3,"file":"static/js/6583.203a3149.chunk.js","mappings":"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","sources":["redux/actions/eventAction.js","views/event/SimpleCard.jsx","views/event/event-edit.jsx"],"sourcesContent":["import axios from 'axios';\nimport * as CONSTANT from '../../config';\nexport const GET_EVENT_LIST = 'GET_EVENT_LIST';\nexport const ADD_EVENT = 'ADD_EVENT';\nexport const UPDATE_EVENT = 'UPDATE_EVENT';\nexport const DELETE_EVENT = 'DELETE_EVENT';\n\nexport const getEventList = () => (dispatch) => {\n    axios.get(CONSTANT.BASE_URL + '/').then((res) => {\n        dispatch({\n            type: GET_EVENT_LIST,\n            payload: res.data.event,\n        });\n    });\n};\n\nexport const updateEvent = (eventData) => (dispatch) => {\n    console.log(\"Redux Event\", eventData);\n    axios\n      .post(CONSTANT.BASE_URL + \"/event/\", eventData)\n      .then((res) => {\n        dispatch({\n          type: UPDATE_EVENT,\n          payload: res.data,\n        });\n      })\n      .catch((error) => {\n        console.error(\"Error updating event:\", error);\n        // Handle the error here (e.g., dispatch an error action, show an error message)\n    });\n};\n     \n\nexport const deleteEvent = async (_id)=> {\n    await axios.delete(CONSTANT.BASE_URL +`/delete/${_id }`)\n};\n\nexport const addEvent = async (event) => {\n    await axios.post(CONSTANT.BASE_URL + `/`, event)\n }","import { Card } from '@mui/material';\r\nimport { Box, styled } from '@mui/system';\r\n\r\nconst CardRoot = styled(Card)(() => ({\r\n  height: '100%',\r\n  padding: '20px 24px',\r\n}));\r\n\r\nconst CardTitle = styled('div')(({ subtitle }) => ({\r\n  fontSize: '1.2rem',\r\n  fontWeight: '500',\r\n  textTransform: 'capitalize',\r\n  marginBottom: !subtitle && '16px',\r\n}));\r\n\r\nconst SimpleCard = ({ children, title, subtitle, icon }) => {\r\n  return (\r\n    <CardRoot elevation={6}>\r\n      <CardTitle subtitle={subtitle}>{title}</CardTitle>\r\n      {subtitle && <Box sx={{ mb: 2 }}>{subtitle}</Box>}\r\n      {children}\r\n    </CardRoot>\r\n  );\r\n};\r\n\r\nexport default SimpleCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Stack,\r\n  styled,\r\n} from '@mui/material';\r\nimport SimpleCard from './SimpleCard';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator';\r\nimport { updateEvent } from 'src/redux/actions/eventAction';\r\nimport moment from \"moment\";\r\n  \r\nconst StyledTextField = styled(TextValidator)(({ theme }) => ({\r\n  width: '100%',\r\n  marginBottom: '16px',\r\n}));\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n  margin: '30px',\r\n}));\r\n\r\nconst EditEvent = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const eventData = location.state;\r\n  const EventEdit = eventData.subscriber\r\n  \r\n\r\n  const [updatedData, setUpdatedData] = useState({\r\n    event_name: EventEdit.event_name || '',\r\n    description: EventEdit.description || '',\r\n    start_time: moment(EventEdit.start_time, 'HH:mm').format('HH:mm') || '',\r\n    end_time: moment(EventEdit.end_time, 'HH:mm').format('HH:mm') || '',\r\n    event_date: moment(EventEdit.event_date).format('YYYY-MM-DD'),\r\n    address: EventEdit.address || '',\r\n    max_players: EventEdit.max_players || '',\r\n    location_hint: EventEdit.location_hint || '',\r\n  });\r\n  \r\n  //console.log('Event Edit Data:', updatedData);\r\n  \r\n  useEffect(() => {\r\n    ValidatorForm.addValidationRule('isNameNotEmpty', (value) => {\r\n      if (value.trim().length === 0) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  \r\n    return () => {\r\n      ValidatorForm.removeValidationRule('isNameNotEmpty');\r\n    };\r\n  }, []);\r\n  \r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUpdatedData((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(`https://go-time.onrender.com/api/event/`, {     \r\n        method: 'post',        \r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Update successful\r\n        dispatch(updateEvent(updatedData));\r\n        history.push('/event/event-list');  \r\n      } else {\r\n        // Update failed\r\n        // Handle error scenario\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating data:', error);\r\n      // Handle error scenario\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    history.goBack(); \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n            <Button\r\n                sx={{ mb: 2, pl: 1 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleButtonClick}\r\n            >\r\n                <ArrowBackIcon aria-label=\"ArrowBackIcon\" aria-haspopup=\"true\" />\r\n                Back\r\n            </Button>\r\n\r\n        <Stack spacing={3}>\r\n        <SimpleCard title=\"Add New Event\">\r\n          <ValidatorForm onSubmit={handleSubmit} onError={() => null}>\r\n            <Grid container spacing={6}>\r\n              <Grid item lg={6} md={6} sm={12} xs={12} sx={{ mt: 2 }}>\r\n                      <StyledTextField\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"event_name\"\r\n                        id=\"event_name\"\r\n                        value={updatedData.event_name}\r\n                        onChange={handleInputChange}\r\n                        label=\"Event name\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"description\"\r\n                        id=\"description\"\r\n                        value={updatedData.description}\r\n                        onChange={handleInputChange}\r\n                        label=\"Description\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n\r\n                     \r\n                      <StyledTextField\r\n                        type=\"time\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"start_time\"\r\n                        id=\"start_time\"\r\n                        value={updatedData.start_time}\r\n                        onChange={handleInputChange}\r\n                        label=\"Start Time\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        type=\"time\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"end_time\"\r\n                        id=\"end_time\"\r\n                        value={updatedData.end_time}\r\n                        onChange={handleInputChange}\r\n                        label=\"End Time\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        type=\"date\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"event_date\"\r\n                        id=\"event_date\"\r\n                        value={updatedData.event_date}\r\n                        onChange={handleInputChange}\r\n                        label=\"Event Date\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        type=\"number\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"max_players\"\r\n                        id=\"max_players\"\r\n                        value={updatedData.max_players}\r\n                        onChange={handleInputChange}\r\n                        label=\"Max players\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"address\"\r\n                        id=\"address\"\r\n                        value={updatedData.address}\r\n                        onChange={handleInputChange}\r\n                        label=\"Address\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        name=\"location_hint\"\r\n                        id=\"location_hint\"\r\n                        value={updatedData.location_hint}\r\n                        onChange={handleInputChange}\r\n                        label=\"Location Hint\"\r\n                        validators={['required', 'isNameNotEmpty']}\r\n                        errorMessages={['This field is required', 'Please enter a valid full name']}\r\n                      />\r\n                \r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\r\n              <SendIcon aria-label=\"send\" aria-haspopup=\"true\" />\r\n              Update Event\r\n            </Button>\r\n          </ValidatorForm>\r\n          </SimpleCard>\r\n        </Stack>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default EditEvent;\r\n"],"names":["updateEvent","eventData","dispatch","console","log","axios","CONSTANT","then","res","type","payload","data","catch","error","CardRoot","styled","Card","height","padding","CardTitle","_ref","fontSize","fontWeight","textTransform","marginBottom","subtitle","_ref2","children","title","icon","_jsxs","elevation","_jsx","Box","sx","mb","StyledTextField","TextValidator","theme","width","Container","margin","useDispatch","history","useHistory","EventEdit","useLocation","state","subscriber","_useState","useState","event_name","description","start_time","moment","format","end_time","event_date","address","max_players","location_hint","_useState2","_slicedToArray","updatedData","setUpdatedData","useEffect","ValidatorForm","addValidationRule","value","trim","length","removeValidationRule","handleInputChange","event","_event$target","target","name","prevState","_objectSpread","_defineProperty","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","preventDefault","fetch","method","headers","body","JSON","stringify","sent","ok","push","t0","stop","_x","apply","arguments","Button","pl","variant","color","onClick","goBack","ArrowBackIcon","Stack","spacing","SimpleCard","onSubmit","onError","Grid","container","item","lg","md","sm","xs","mt","fullWidth","size","id","onChange","label","validators","errorMessages","SendIcon"],"sourceRoot":""}