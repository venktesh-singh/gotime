{"version":3,"file":"static/js/2112.195b7aa0.chunk.js","mappings":"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","sources":["views/avatar/SimpleCard.jsx","redux/actions/avatarAction.js","views/avatar/avatar-add.jsx"],"sourcesContent":["import { Card } from '@mui/material';\r\nimport { Box, styled } from '@mui/system';\r\n\r\nconst CardRoot = styled(Card)(() => ({\r\n  height: '100%',\r\n  padding: '20px 24px',\r\n}));\r\n\r\nconst CardTitle = styled('div')(({ subtitle }) => ({\r\n  fontSize: '1.2rem',\r\n  fontWeight: '500',\r\n  textTransform: 'capitalize',\r\n  marginBottom: !subtitle && '16px',\r\n}));\r\n\r\nconst SimpleCard = ({ children, title, subtitle, icon }) => {\r\n  return (\r\n    <CardRoot elevation={6}>\r\n      <CardTitle subtitle={subtitle}>{title}</CardTitle>\r\n      {subtitle && <Box sx={{ mb: 2 }}>{subtitle}</Box>}\r\n      {children}\r\n    </CardRoot>\r\n  );\r\n};\r\n\r\nexport default SimpleCard;\r\n","import axios from 'axios';\r\nimport * as CONSTANT from '../../config';\r\nexport const GET_AVATAR_LIST = 'GET_AVATAR_LIST';\r\nexport const UPDATE_AVATAR = 'UPDATE_AVATAR';\r\n\r\nexport const getAvatarList = () => (dispatch) => {\r\n    axios.get(CONSTANT.BASE_URL + '/avatar').then((res) => {  \r\n        dispatch({\r\n            type: GET_AVATAR_LIST,\r\n            payload: res.data.user,\r\n        });\r\n    });\r\n};\r\n\r\nexport const addupdateAvatar = (avaData) => (dispatch) => {\r\n    console.log(\"Redux Avatar\", avaData);\r\n    const formData = new FormData();  \r\n    //formData.append('name', avaData.name);\r\n    if (avaData.image) {\r\n      formData.append('image', avaData.image);\r\n    }\r\n    axios.post(CONSTANT.BASE_URL + `/avatar`, formData)\r\n      .then((res) => {   \r\n        dispatch({\r\n          type: UPDATE_AVATAR,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error adding/updating Avatar:', error);\r\n      });\r\n  };\r\n     \r\n\r\n","import React, { useState } from 'react';\r\nimport { Stack } from '@mui/material';\r\nimport { Box, styled } from '@mui/system';\r\nimport SimpleCard from './SimpleCard';\r\nimport { Button, Grid, TextField, Icon } from '@mui/material';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addupdateAvatar, getAvatarList } from 'src/redux/actions/avatarAction';\r\nimport { useHistory } from 'react-router-dom';  \r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n  margin: '30px',\r\n  [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n  '& .breadcrumb': {\r\n    marginBottom: '30px',\r\n    [theme.breakpoints.down('sm')]: { marginBottom: '16px' },\r\n  },\r\n}));\r\n\r\nconst Form = styled('form')(() => ({\r\n  paddingLeft: '16px',\r\n  paddingRight: '16px',\r\n}));\r\n\r\nconst AddAvatar = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [uploading, setUploading] = useState(false);\r\n    //console.log(\"File Select\", selectedFile);\r\n    //console.log(\"File Upload\", uploading);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    accept: 'image/*',\r\n    onDrop: (acceptedFiles) => {\r\n        setSelectedFile(acceptedFiles[0]);\r\n        setUploading(false); // Reset the uploading state when a new file is selected\r\n    },\r\n    });\r\n\r\n    const handleSubmit = async (values) => {\r\n        const formData = new FormData();\r\n        ///formData.append('name', values.name);  \r\n        console.log(\"Selected File:\", selectedFile);\r\n        if (selectedFile) {\r\n            formData.append('image', selectedFile);\r\n        } else {\r\n            console.log(\"No file selected\");\r\n        }\r\n    \r\n        const config = {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n        };\r\n    \r\n        setUploading(true);\r\n        try {\r\n        await dispatch(addupdateAvatar(formData, config));\r\n        toast.success('Avatar Added Successfully!', {\r\n            // ...\r\n        });\r\n        dispatch(getAvatarList());\r\n        history.push(\"/avatar/avatar-list\");\r\n        } catch (error) {\r\n        console.error('Error adding avatar:', error);\r\n        toast.error('Failed to add avatar. Please try again later.', {\r\n            // ...\r\n        });\r\n        } finally {\r\n        setUploading(false);\r\n        }\r\n    };\r\n  \r\n  \r\n    const handleButtonClick = () => {\r\n        // Navigate back to the previous page\r\n        history.goBack();\r\n    };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        theme=\"colored\"\r\n        autoClose={2000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <Container>\r\n        <Button\r\n          sx={{ mb: 2, pl: 1 }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleButtonClick}\r\n        >\r\n          <ArrowBackIcon aria-label=\"ArrowBackIcon\" aria-haspopup=\"true\" />\r\n          Back\r\n        </Button>\r\n\r\n        <Stack spacing={3}>\r\n          <SimpleCard title=\"Add New Avatar\">\r\n            <Formik\r\n              onSubmit={handleSubmit}\r\n              enableReinitialize={true}\r\n              initialValues={initialValues}\r\n              validationSchema={avatarSchema}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item sm={6} xs={12}>\r\n                      <Box flex={1}>\r\n                        <div style={{border:'2px dashed #aaa',padding:'12px',textAlign:'center'}} {...getRootProps()}>\r\n                            <input type=\"file\" name=\"image\" {...getInputProps()} />  \r\n                            {isDragActive ? (\r\n                            <p>Drop the image file here ...</p>\r\n                            ) : (\r\n                            <b>\r\n                                Drag and drop an image file here, or click to select file\r\n                            </b>\r\n                            )}\r\n                        </div>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    sx={{ mb: 2, px: 4 }}\r\n                    disabled={uploading}\r\n                    style={{marginTop:'10px'}}\r\n                  >\r\n                    {uploading ? 'Uploading...' : 'Add Avatar'}\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </SimpleCard>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst avatarSchema = Yup.object().shape({  \r\n    image: Yup.string().required('Avatar Image is required'),  \r\n});\r\n\r\nconst initialValues = {\r\n    image: '',\r\n};\r\n\r\nexport default AddAvatar;\r\n"],"names":["CardRoot","styled","Card","height","padding","CardTitle","_ref","fontSize","fontWeight","textTransform","marginBottom","subtitle","_ref2","children","title","icon","_jsxs","elevation","_jsx","Box","sx","mb","getAvatarList","dispatch","axios","CONSTANT","then","res","type","payload","data","user","addupdateAvatar","avaData","console","log","formData","FormData","image","append","catch","error","Container","theme","margin","_defineProperty","breakpoints","down","Form","paddingLeft","paddingRight","avatarSchema","Yup","shape","required","initialValues","useDispatch","history","useHistory","_useState","useState","_useState2","_slicedToArray","selectedFile","setSelectedFile","_useState3","_useState4","uploading","setUploading","_useDropzone","useDropzone","accept","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","headers","toast","success","push","t0","finish","stop","_x","apply","arguments","_Fragment","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Button","pl","variant","color","onClick","goBack","ArrowBackIcon","Stack","spacing","SimpleCard","Formik","onSubmit","enableReinitialize","validationSchema","_ref4","errors","touched","handleChange","handleBlur","Grid","container","item","sm","xs","flex","_objectSpread","style","border","textAlign","name","px","disabled","marginTop"],"sourceRoot":""}