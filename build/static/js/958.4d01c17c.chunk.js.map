{"version":3,"file":"static/js/958.4d01c17c.chunk.js","mappings":"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","sources":["views/slot/SimpleCard.jsx","redux/actions/slotAction.js","views/slot/slot-add.jsx"],"sourcesContent":["import { Card } from '@mui/material';\r\nimport { Box, styled } from '@mui/system';\r\n\r\nconst CardRoot = styled(Card)(() => ({\r\n  height: '100%',\r\n  padding: '20px 24px',\r\n}));\r\n\r\nconst CardTitle = styled('div')(({ subtitle }) => ({\r\n  fontSize: '1.2rem',\r\n  fontWeight: '500',\r\n  textTransform: 'capitalize',\r\n  marginBottom: !subtitle && '16px',\r\n}));\r\n\r\nconst SimpleCard = ({ children, title, subtitle, icon }) => {\r\n  return (\r\n    <CardRoot elevation={6}>\r\n      <CardTitle subtitle={subtitle}>{title}</CardTitle>\r\n      {subtitle && <Box sx={{ mb: 2 }}>{subtitle}</Box>}\r\n      {children}\r\n    </CardRoot>\r\n  );\r\n};\r\n\r\nexport default SimpleCard;\r\n","import axios from 'axios';\nimport * as CONSTANT from '../../config';\nexport const GET_SLOT_LIST = 'GET_SLOT_LIST';\nexport const ADD_SLOT = 'ADD_SLOT';\nexport const UPDATE_SLOT = 'UPDATE_SLOT';\n\nexport const addupdateSlot = (slotData) => (dispatch) => {\n    console.log(\"Redux Slot\", slotData)\n    axios.post(CONSTANT.BASE_URL + `/slot/create_slot`, slotData).then((res) => {   \n        dispatch({\n            type: UPDATE_SLOT,\n            payload: res.data,\n        });\n    });\n};    \n\nexport const deleteSlot = async (_id)=> {\n    await axios.delete(CONSTANT.BASE_URL +`/delete/${_id }`)\n};\n","import React, { useState } from 'react';\r\nimport { Stack } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport SimpleCard from './SimpleCard';\r\nimport { Button, Grid, TextField } from '@mui/material';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addupdateSlot } from 'src/redux/actions/slotAction';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport moment from 'moment';\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n  margin: '30px',\r\n  [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n  '& .breadcrumb': {\r\n    marginBottom: '30px',\r\n    [theme.breakpoints.down('sm')]: { marginBottom: '16px' },\r\n  },\r\n}));\r\n\r\nconst Form = styled('form')(() => ({\r\n  paddingLeft: '16px',\r\n  paddingRight: '16px',\r\n}));\r\n\r\nconst StyledTextField = styled(TextField)(() => ({\r\n  marginBottom: '16px',\r\n}));\r\n\r\nconst AddSlot = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const handleSubmit = async (values) => {\r\n    const formData = new FormData();\r\n    formData.append('sport', values.sport);\r\n    formData.append('maxPlayers', values.maxPlayers);\r\n    formData.append('startTime',moment(values.startTime, 'HH:mm').format('HH:mm'));\r\n    formData.append('endTime', moment(values.endTime, 'HH:mm').format('HH:mm'));\r\n    const formattedEventDate = moment(values.date).format('YYYY-MM-DD');\r\n    formData.append('date', formattedEventDate);\r\n  \r\n    try {\r\n      await dispatch(addupdateSlot(formData));\r\n      toast.success('Slots Added Successfully!');\r\n      history.push('/slot/slot-list');\r\n    } catch (error) {\r\n      console.error('Error adding slots:', error);\r\n      toast.error('Failed to add slots. Please try again later.');\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    // Navigate back to the previous page\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        theme=\"colored\"\r\n        autoClose={2000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <Container>\r\n        <Button\r\n          sx={{ mb: 2, pl: 1 }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleButtonClick}\r\n        >\r\n          <ArrowBackIcon aria-label=\"ArrowBackIcon\" aria-haspopup=\"true\" />\r\n          Back\r\n        </Button>\r\n\r\n        <Stack spacing={3}>\r\n          <SimpleCard title=\"Add New Slot\">\r\n            <Formik\r\n              onSubmit={handleSubmit}\r\n              enableReinitialize={true}\r\n              initialValues={initialValues}\r\n              validationSchema={slotSchema}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item sm={6} xs={12}>\r\n                      <StyledTextField\r\n                        fullWidth\r\n                        name=\"sport\"\r\n                        label=\"Sport Name\"\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        value={values.sport || ''}\r\n                        error={Boolean(touched.sport && errors.sport)}\r\n                        helperText={touched.sport && errors.sport}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        type=\"date\"\r\n                        name=\"date\"\r\n                        label=\"Date\"\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        value={values.date || ''}\r\n                        error={Boolean(touched.date && errors.date)}\r\n                        helperText={touched.date && errors.date}\r\n                        style={{ color: '#000', width: '100%' }}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        type=\"time\"\r\n                        name=\"startTime\"\r\n                        label=\"Start Time\"\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        value={values.startTime || ''}\r\n                        error={Boolean(touched.startTime && errors.startTime)}\r\n                        helperText={touched.startTime && errors.startTime}\r\n                        style={{ color: '#000', width: '100%' }}\r\n                      />\r\n                      <StyledTextField\r\n                        type=\"time\"\r\n                        name=\"endTime\"\r\n                        label=\"End Time\"\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        value={values.endTime || ''}\r\n                        error={Boolean(touched.endTime && errors.endTime)}\r\n                        helperText={touched.endTime && errors.endTime}\r\n                        style={{ color: '#000', width: '100%' }}\r\n                      />\r\n\r\n                      <StyledTextField\r\n                        fullWidth\r\n                        name=\"maxPlayers\"\r\n                        label=\"Max Players\"\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        value={values.maxPlayers || ''}\r\n                        error={Boolean(touched.maxPlayers && errors.maxPlayers)}\r\n                        helperText={touched.maxPlayers && errors.maxPlayers}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    sx={{ mb: 2, px: 4 }}\r\n                    disabled={uploading}\r\n                    style={{ marginTop: '10px' }}\r\n                  >\r\n                    {uploading ? 'Uploading...' : 'Add Slot'}\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </SimpleCard>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst slotSchema = Yup.object().shape({\r\n  sport: Yup.string().required('Sport name is required'),\r\n  date: Yup.string().required('Date is required'),\r\n  startTime: Yup.string().required('Start Time is required'),\r\n  endTime: Yup.string().required('End Time is required'),\r\n  maxPlayers: Yup.string().required('Max Players is required'),\r\n});\r\n\r\nconst initialValues = {\r\n  sport: '',\r\n  date: '',\r\n  startTime: '',\r\n  endTime: '',\r\n  maxPlayers: '',\r\n};\r\n\r\nexport default AddSlot;\r\n"],"names":["CardRoot","styled","Card","height","padding","CardTitle","_ref","fontSize","fontWeight","textTransform","marginBottom","subtitle","_ref2","children","title","icon","_jsxs","elevation","_jsx","Box","sx","mb","addupdateSlot","slotData","dispatch","console","log","axios","CONSTANT","then","res","type","payload","data","Container","theme","margin","_defineProperty","breakpoints","down","Form","paddingLeft","paddingRight","StyledTextField","TextField","slotSchema","Yup","shape","sport","required","date","startTime","endTime","maxPlayers","initialValues","useDispatch","history","useHistory","_useState","useState","_useState2","_slicedToArray","uploading","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","formData","formattedEventDate","wrap","_context","prev","next","FormData","append","moment","format","toast","success","push","t0","error","stop","_x","apply","arguments","_Fragment","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Button","pl","variant","color","onClick","goBack","ArrowBackIcon","Stack","spacing","SimpleCard","Formik","onSubmit","enableReinitialize","validationSchema","_ref4","errors","touched","handleChange","handleBlur","Grid","container","item","sm","xs","fullWidth","name","label","size","onBlur","onChange","value","Boolean","helperText","style","width","px","disabled","marginTop"],"sourceRoot":""}