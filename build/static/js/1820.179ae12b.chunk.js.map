{"version":3,"file":"static/js/1820.179ae12b.chunk.js","mappings":"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","sources":["reusable/DocsLink.js","views/notifications/toaster/Toaster.js"],"sourcesContent":["import React from 'react'\r\nimport { CLink } from '@coreui/react'\r\n\r\nconst DocsLink = props => {\r\n  const {\r\n    name,\r\n    text,\r\n    ...rest\r\n  } = props\r\n\r\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\r\n\r\n  return (\r\n    <div className=\"card-header-actions\">\r\n      <CLink \r\n        {...rest}\r\n        href={href}\r\n        rel=\"noreferrer noopener\" \r\n        target=\"_blank\" \r\n        className=\"card-header-action\"  \r\n      >\r\n        <small className=\"text-muted\">{ text || 'docs' }</small>\r\n      </CLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(DocsLink)","import React, { useState } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n  CForm,\r\n  CInput,\r\n  CInputCheckbox,\r\n  CButton,\r\n  CContainer,\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CLabel\r\n} from '@coreui/react'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst Toaster = () => {\r\n\r\n  const positions = [\r\n    'static',\r\n    'top-left',\r\n    'top-center',\r\n    'top-right',\r\n    'top-full',\r\n    'bottom-left',\r\n    'bottom-center',\r\n    'bottom-right',\r\n    'bottom-full'\r\n  ]\r\n\r\n  const [toasts, setToasts] = useState([\r\n    { position: 'static'},\r\n    { position: 'static'},\r\n    { position: 'top-right', autohide: 3000 }\r\n  ])\r\n\r\n  const [position, setPosition] = useState('top-right')\r\n  const [autohide, setAutohide] = useState(true)\r\n  const [autohideValue, setAutohideValue] = useState(5000)\r\n  const [closeButton, setCloseButton] = useState(true)\r\n  const [fade, setFade] = useState(true)\r\n\r\n  const addToast = () => {\r\n    setToasts([\r\n      ...toasts, \r\n      { position, autohide: autohide && autohideValue, closeButton, fade }\r\n    ])\r\n  }\r\n\r\n\r\n  const toasters = (()=>{\r\n    return toasts.reduce((toasters, toast) => {\r\n      toasters[toast.position] = toasters[toast.position] || []\r\n      toasters[toast.position].push(toast)\r\n      return toasters\r\n    }, {})\r\n  })()\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        Toasts.\r\n        <DocsLink name=\"-Toast\"/>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CContainer>\r\n          <CRow>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              <CForm>\r\n                <h5>Add toast with following props:</h5>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\r\n                  <CInputCheckbox\r\n                    id=\"autohide\"\r\n                    checked={autohide}\r\n                    onChange={e => { setAutohide(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\r\n                    Autohide of the toast\r\n                  </CLabel>\r\n                </CFormGroup>\r\n                {\r\n                  autohide &&\r\n                  <CFormGroup className=\"my-2\">\r\n                    <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\r\n                    <CInput\r\n                      type=\"number\"\r\n                      value={autohideValue}\r\n                      onChange={e => {\r\n                        setAutohideValue(Number(e.target.value))\r\n                      }}\r\n                    />\r\n                  </CFormGroup>\r\n                }\r\n\r\n                <CFormGroup className=\"my-2\">\r\n                  <CLabel htmlFor=\"ccyear\">Position</CLabel>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={position}\r\n                    onChange={e => {setPosition(e.target.value)}}\r\n                  >\r\n                    {\r\n                      positions.map((position, i)=>(\r\n                        <option key={i}>{position}</option>\r\n                      ))\r\n                    }\r\n                  </select>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"fade\"\r\n                    checked={fade}\r\n                    onChange={e => { setFade(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"close\"\r\n                    custom\r\n                    checked={closeButton}\r\n                    onChange={e=> { setCloseButton(e.target.checked) }}\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">\r\n                    closeButton\r\n                  </CLabel>\r\n                </CFormGroup>\r\n\r\n                <CButton\r\n                  className=\"mr-1 w-25\"\r\n                  color=\"success\"\r\n                  onClick={addToast}\r\n                >\r\n                  Add toast\r\n                </CButton>\r\n\r\n              </CForm>\r\n            </CCol>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              {Object.keys(toasters).map((toasterKey) => (\r\n                <CToaster\r\n                  position={toasterKey}\r\n                  key={'toaster' + toasterKey}\r\n                >\r\n                  {\r\n                    toasters[toasterKey].map((toast, key)=>{\r\n                    return(\r\n                      <CToast\r\n                        key={'toast' + key}\r\n                        show={true}\r\n                        autohide={toast.autohide}\r\n                        fade={toast.fade}\r\n                      >\r\n                        <CToastHeader closeButton={toast.closeButton}>\r\n                          Toast title\r\n                        </CToastHeader>\r\n                        <CToastBody>\r\n                          {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\r\n                        </CToastBody>\r\n                      </CToast>\r\n                    )\r\n                  })\r\n                  }\r\n                </CToaster>\r\n              ))}\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Toaster\r\n"],"names":["DocsLink","props","name","text","rest","_objectWithoutProperties","_excluded","href","concat","_jsx","className","children","CLink","_objectSpread","rel","target","React","_useState","useState","position","autohide","_useState2","_slicedToArray","toasts","setToasts","_useState3","_useState4","setPosition","_useState5","_useState6","setAutohide","_useState7","_useState8","autohideValue","setAutohideValue","_useState9","_useState10","closeButton","setCloseButton","_useState11","_useState12","fade","setFade","toasters","reduce","toast","push","_jsxs","CCard","CCardHeader","CCardBody","CContainer","CRow","CCol","sm","lg","CForm","CFormGroup","variant","CInputCheckbox","id","checked","onChange","e","custom","CLabel","htmlFor","CInput","type","value","Number","map","i","CButton","color","onClick","_toConsumableArray","Object","keys","toasterKey","CToaster","key","CToast","show","CToastHeader","CToastBody"],"sourceRoot":""}